<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyPy (Posts by Carl Friedrich Bolz-Tereick)</title><link>https://www.pypy.org/</link><description></description><atom:link href="https://www.pypy.org/authors/carl-friedrich-bolz-tereick.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:pypy-dev@pypy.org"&gt;The PyPy Team&lt;/a&gt; </copyright><lastBuildDate>Sun, 07 Nov 2021 15:32:24 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Better JIT Support for Auto-Generated Python Code</title><link>https://www.pypy.org/posts/2021/09/jit-auto-generated-code.html</link><dc:creator>Carl Friedrich Bolz-Tereick</dc:creator><description>&lt;div&gt;&lt;h2&gt;Performance Cliffs&lt;/h2&gt;
&lt;p&gt;A common bad property of many different JIT compilers is that of a "performance
cliff": A seemingly reasonable code change, leading to massively reduced
performance due to hitting some weird property of the JIT compiler that's not
easy to understand for the programmer (e.g. here's a blog post about the fix of
a performance cliff when running &lt;a href="https://v8.dev/blog/react-cliff"&gt;React on
V8&lt;/a&gt;). Hitting a performance cliff as a
programmer can be intensely frustrating and turn people off from using PyPy
altogether. Recently we've been working on trying to remove some of PyPy's
performance cliffs, and this post describes one such effort.&lt;/p&gt;
&lt;p&gt;The problem showed up in an &lt;a href="https://foss.heptapod.net/pypy/pypy/-/issues/3402"&gt;issue&lt;/a&gt;
where somebody found the performance
of their website using &lt;a href="https://www.tornadoweb.org/en/stable/"&gt;Tornado&lt;/a&gt; a lot
worse than what various benchmarks suggested. It took some careful digging to
figure out what caused the problem: The slow performance was caused by the huge
functions that the Tornado templating engine creates. These functions lead the
JIT to behave in unproductive ways. In this blog post I'll describe why the
problem occurs and how we fixed it.&lt;/p&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;After quite a bit of debugging we narrowed down the problem to the following
reproducer: If you render a big HTML template
(&lt;a href="https://gist.github.com/cfbolz/4a346d104fee41affc860a7b928b7291#file-index-html"&gt;example&lt;/a&gt;)
using the Tornado templating engine, the template rendering is really not any
faster than CPython. A small template doesn't show this behavior, and other
parts of Tornado seem to perform well. So we looked into how the templating
engine works, and it turns out that the templates are compiled into Python
functions. This means that a big template can turn into a really enormous Python
function (&lt;a href="https://gist.github.com/cfbolz/4a346d104fee41affc860a7b928b7291#file-zz_autogenerated-py"&gt;Python version of the
example&lt;/a&gt;).
For some reason really enormous Python functions aren't handled particularly
well by the JIT, and in the next section I'll explain some the background that's
necessary to understand why this happens.&lt;/p&gt;
&lt;h2&gt;Trace Limits and Inlining&lt;/h2&gt;
&lt;p&gt;To understand why the problem occurs, it's necessary to understand how PyPy's
trace limit and inlining works. The tracing JIT has a maximum trace length built
in, the reason for that is some limitation in the compact encoding of traces in
the JIT. Another reason is that we don't want to generate arbitrary large chunks
of machine code. Usually, when we hit the trace limit, it is due to &lt;em&gt;inlining&lt;/em&gt;.
While tracing, the JIT will inline many of the functions called from the
outermost one. This is usually good and improves performance greatly, however,
inlining can also lead to the trace being too long. If that happens, we
will mark a called function as uninlinable. The next time we trace the outer
function we won't inline it, leading to a shorter trace, which hopefully fits
the trace limit.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Diagram illustrating the interaction of the trace limit and inlining" src="https://www.pypy.org/images/2021-open-ended-traces-01-inlining.svg"&gt;&lt;/p&gt;
&lt;p&gt;In the diagram above we trace a function &lt;code&gt;f&lt;/code&gt;, which calls a function &lt;code&gt;g&lt;/code&gt;, which
is inlined into the trace. The trace ends up being too long, so the JIT
disables inlining of &lt;code&gt;g&lt;/code&gt;. The next time we try to trace &lt;code&gt;f&lt;/code&gt; the trace will
contain a &lt;em&gt;call&lt;/em&gt; to &lt;code&gt;g&lt;/code&gt; instead of inlining it. The trace ends up being not too
long, so we can turn it into machine code when tracing finishes.&lt;/p&gt;
&lt;p&gt;Now we know enough to understand what the problem with automatically generated
code is: sometimes, the outermost function itself
doesn't fit the trace limit, without any inlining going on at all. This is
usually not the case for normal, hand-written Python functions. However, it can
happen for automatically generated Python code, such as the code that the
Tornado templating engine produces.&lt;/p&gt;
&lt;p&gt;So, what happens when the JIT hits such a huge function? The function is traced
until the trace is too long. Then the trace limits stops further tracing. Since
nothing was inlined, we cannot make the trace shorter the next time by disabling
inlining. Therefore, this happens again and again, the next time we trace the
function we run into exactly the same problem. The net effect is that the
function is even slowed down: we spend time tracing it, then stop tracing and
throw the trace away. Therefore, that effort is never useful, so the resulting
execution can be slower than not using the JIT at all!&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;To get out of the endless cycle of useless retracing we first had the idea of
simply disabling all code generation for such huge functions, that produce too long
traces even if there is no inlining at all. However, that lead to disappointing
performance in the example Tornado program, because important parts of the code
remain always interpreted.&lt;/p&gt;
&lt;p&gt;Instead, our solution is now as follows: After we have hit the trace limit and
no inlining has happened so far, we mark the outermost function as a source of huge
traces. The next time we trace such a function, we do so in a special mode. In
that mode, hitting the trace limit behaves differently: Instead of stopping the
tracer and throwing away the trace produced so far, we will use the unfinished
trace to produce machine code. This trace corresponds to the first part of the
function, but stops at a basically arbitrary point in the middle of the
function.&lt;/p&gt;
&lt;p&gt;The question is what should happen when execution
reaches the end of this unfinished trace. We want to be able to cover more of
the function with machine code and therefore need to extend the trace
from that point on. But we don't want to do that too
eagerly to prevent lots and lots of machine code being generated. To achieve
this behaviour we add a guard to the end of the unfinished trace, which will
always fail. This has the right behaviour: a failing guard will transfer control
to the interpreter, but if it fails often enough, we can patch it to jump to
more machine code, that starts from this position. In that way, we can slowly
explore the full gigantic function and add all those parts of the control flow
graph that are actually commonly executed at runtime.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Diagram showing what happens in the new jit when tracing a huge function" src="https://www.pypy.org/images/2021-open-ended-traces-02-no-inlining.svg"&gt;&lt;/p&gt;
&lt;p&gt;In the diagram we are trying to trace a huge function &lt;code&gt;f&lt;/code&gt;, which leads to
hitting the trace limit. However, nothing was inlined into the trace, so
disabling inlining won't ensure a successful trace attempt the next time.
Instead, we mark &lt;code&gt;f&lt;/code&gt; as "huge". This has the effect that when we trace it again
and are about to hit the trace limit, we end the trace at an arbitrary point by
inserting a guard that always fails.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Diagram showing what happens in the new jit when tracing a huge function until completion" src="https://www.pypy.org/images/2021-open-ended-traces-03-complete.svg"&gt;&lt;/p&gt;
&lt;p&gt;If this guard failure is executed often enough, we might patch the guard and
add a jump to a further part of the function &lt;code&gt;f&lt;/code&gt;. This can continue potentially
several times, until the trace really hits and end points (for example by
closing the loop and jumping back to trace 1, or by returning from &lt;code&gt;f&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;Since this is a performance cliff that we didn't observe in any of our
&lt;a href="http://speed.pypy.org/"&gt;benchmarks&lt;/a&gt; ourselves, it's pointless to look at the
effect that this improvement has on existing benchmarks – there shouldn't and
indeed there isn't any.&lt;/p&gt;
&lt;p&gt;Instead, we are going to look at a micro-benchmark that came out of the
original bug report, one that simply renders a big artificial Tornado template
200 times. The code of the micro-benchmark can be found
&lt;a href="https://gist.github.com/cfbolz/4a346d104fee41affc860a7b928b7291"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All benchmarks were run 10 times in new processes. The means and standard
deviations of the benchmark runs are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Implementation&lt;/th&gt;
&lt;th align="right"&gt;Time taken (lower is better)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPython 3.9.5&lt;/td&gt;
&lt;td align="right"&gt;14.19 ± 0.35s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PyPy3 without JIT&lt;/td&gt;
&lt;td align="right"&gt;59.48 ± 5.41s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PyPy3 JIT old&lt;/td&gt;
&lt;td align="right"&gt;14.47 ± 0.35s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PyPy3 JIT new&lt;/td&gt;
&lt;td align="right"&gt;4.89 ± 0.10s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;What we can see is that while the old JIT is very helpful for this
micro-benchmark, it only brings the performance up to CPython levels, not
providing any extra benefit. The new JIT gives an almost 3x speedup.&lt;/p&gt;
&lt;p&gt;Another interesting number we can look at is how often the JIT started a trace,
and for how many traces we produced actual machine code:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Implementation&lt;/th&gt;
&lt;th align="right"&gt;Traces Started&lt;/th&gt;
&lt;th align="right"&gt;Traces sent to backend&lt;/th&gt;
&lt;th align="right"&gt;Time spent in JIT&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PyPy3 JIT old&lt;/td&gt;
&lt;td align="right"&gt;216&lt;/td&gt;
&lt;td align="right"&gt;24&lt;/td&gt;
&lt;td align="right"&gt;0.65s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PyPy3 JIT new&lt;/td&gt;
&lt;td align="right"&gt;30&lt;/td&gt;
&lt;td align="right"&gt;25&lt;/td&gt;
&lt;td align="right"&gt;0.06s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here we can clearly see the problem: The old JIT would try tracing the
auto-generated templating code again and again, but would never actually produce
any machine code, wasting lots of time in the process. The new JIT still traces a
few times uselessly, but then eventually converges and stops emitting machine
code for all the paths through the auto-generated Python code.&lt;/p&gt;
&lt;!--
1: /home/cfbolz/projects/small-commits-pypy/pypy/goal/pypy-c-38-jit-chunked-traces -jit off render.py
            Mean        Std.Dev.    Min         Median      Max
real        59.479      5.411       51.864      59.966      67.721      
user        59.395      5.383       51.821      59.859      67.585      
sys         0.058       0.034       0.020       0.056       0.108

1: pypy3 render.py
            Mean        Std.Dev.    Min         Median      Max
real        14.469      0.352       13.744      14.472      15.174      
user        14.399      0.359       13.671      14.402      15.126      
sys         0.050       0.034       0.024       0.042       0.148

Tracing:        216 0.653033
Backend:        24  0.003664
TOTAL:              14.854610
ops:                2217432
heapcached ops:     701575
recorded ops:       643513
  calls:            60038
guards:             330245
opt ops:            1876
opt guards:         465
opt guards shared:  237
forcings:           0
abort: trace too long:  191
abort: compiling:   0
abort: vable escape:    0
abort: bad loop:    0
abort: force quasi-immut:   1
nvirtuals:          391
nvholes:            122
nvreused:           141
vecopt tried:       0
vecopt success:     0
Total # of loops:   17
Total # of bridges: 8
Freed # of loops:   5
Freed # of bridges: 5


1: /home/cfbolz/projects/small-commits-pypy/pypy/goal/pypy-c-38-jit-chunked-traces render.py
            Mean        Std.Dev.    Min         Median      Max
real        4.892       0.098       4.718       4.882       5.118       
user        4.807       0.097       4.644       4.797       5.022       
sys         0.067       0.019       0.040       0.070       0.096


Tracing:        30  0.060128
Backend:        25  0.033536
TOTAL:              4.551791
ops:                124584
heapcached ops:     53962
recorded ops:       33486
  calls:            4389
guards:             14061
opt ops:            18922
opt guards:         4281
opt guards shared:  2248
forcings:           0
abort: trace too long:  4
abort: compiling:   0
abort: vable escape:    0
abort: bad loop:    0
abort: force quasi-immut:   1
abort: segmenting trace:    5
nvirtuals:          314
nvholes:            90
nvreused:           114
vecopt tried:       0
vecopt success:     0
Total # of loops:   14
Total # of bridges: 12
Freed # of loops:   0
Freed # of bridges: 0

--&gt;

&lt;h2&gt;Related Work&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.timfelgentreff.de/"&gt;Tim Felgentreff&lt;/a&gt; pointed me to the fact that
Truffle also has a
&lt;a href="https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/nodes/BlockNode.html"&gt;mechanism&lt;/a&gt;
to slice huge methods into smaller compilation units (and I am sure other JITs
have such mechanisms as well).&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post we've described a performance cliff in PyPy's JIT, that of really
big auto-generated functions which hit the trace limit without inlining, that we
still want to generate machine code for. We achieve this by chunking up the
trace into several smaller traces, which we compile piece by piece. This is not
a super common thing to be happening – otherwise we would have run into and
fixed it earlier – but it's still good to have a fix now.&lt;/p&gt;
&lt;p&gt;The work
described in this post tiny bit experimental still, but we will release it as
part of the upcoming 3.8 beta release, to get some more experience with it.
Please grab a &lt;a href="https://mail.python.org/pipermail/pypy-dev/2021-September/016214.html"&gt;3.8 release
candidate&lt;/a&gt;,
try it out and let us know your observations, good and bad!&lt;/p&gt;&lt;/div&gt;</description><guid>https://www.pypy.org/posts/2021/09/jit-auto-generated-code.html</guid><pubDate>Fri, 17 Sep 2021 19:55:09 GMT</pubDate></item><item><title>Some Ways that PyPy uses Graphviz</title><link>https://www.pypy.org/posts/2021/04/ways-pypy-graphviz.html</link><dc:creator>Carl Friedrich Bolz-Tereick</dc:creator><description>&lt;section id="some-way-that-pypy-uses-graphviz"&gt;
&lt;h2&gt;Some way that PyPy uses Graphviz&lt;/h2&gt;
&lt;p&gt;Somebody wrote this super cool thread on Twitter about using &lt;a class="reference external" href="https://graphviz.org"&gt;Graphviz&lt;/a&gt; to make
software visualize its internal state:&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;🧵 Make yours and everybody else's lives slightly less terrible by having all your programs print out their internal stuff as pictures; ✨ a thread ✨ &lt;a href="https://t.co/NjQ42bXN2E"&gt;pic.twitter.com/NjQ42bXN2E&lt;/a&gt;&lt;/p&gt;— Kate (@thingskatedid) &lt;a href="https://twitter.com/thingskatedid/status/1386077306381242371?ref_src=twsrc%5Etfw"&gt;April 24, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;PyPy is using this approach a lot too and I collected a few screenshots of that
technique &lt;a class="reference external" href="https://twitter.com/cfbolz/status/1386315196982079491"&gt;on Twitter&lt;/a&gt; and I thought it would make a nice blog post too!&lt;/p&gt;
&lt;p&gt;The most important view early in the project, and the way that our Graphviz
visualizations got started was that we implemented a way to look at the control
flow graphs of our RPython functions after type inference. They are in static
single information form (&lt;a class="reference external" href="https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.1.9976"&gt;SSI&lt;/a&gt;), a variant of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Static_single_assignment_form"&gt;SSA&lt;/a&gt; form. Hovering over the
variables shows the inferred types in the footer:&lt;/p&gt;
&lt;img alt="/images/2021-graphviz-02-cfg-types.png" src="https://www.pypy.org/images/2021-graphviz-02-cfg-types.png"&gt;
&lt;p&gt;There's another view that shows the inferred call graph of the program:&lt;/p&gt;
&lt;img alt="/images/2021-graphviz-05-call-graph.png" src="https://www.pypy.org/images/2021-graphviz-05-call-graph.png"&gt;
&lt;p&gt;A related viewer shows the inferred class hierarchy (in this case the exception
hierarchy) and you can focus on a single class, which will show you its base
classes and all the methods and instance attributes that were found:&lt;/p&gt;
&lt;img alt="/images/2021-graphviz-03-classhier.png" src="https://www.pypy.org/images/2021-graphviz-03-classhier.png"&gt;
&lt;img alt="/images/2021-graphviz-04-classhier-detailed.png" src="https://www.pypy.org/images/2021-graphviz-04-classhier-detailed.png"&gt;
&lt;p&gt;We also have a view to show us the traces that are produced by the tracing JIT
tests. this viewer doesn't really scale to the big traces that the full Python
interpreter produces, but it's really useful during testing:&lt;/p&gt;
&lt;img alt="/images/2021-graphviz-06-trace.png" src="https://www.pypy.org/images/2021-graphviz-06-trace.png"&gt;
&lt;p&gt;Then there are more traditional tree views, eg here is a parse tree for a small
piece of Python source code:&lt;/p&gt;
&lt;img alt="/images/2021-graphviz-07-parse-tree.png" src="https://www.pypy.org/images/2021-graphviz-07-parse-tree.png"&gt;
&lt;p&gt;Parsing-related we have visualized the &lt;a class="reference external" href="https://www.pypy.org/posts/2008/01/visualizing-python-tokenizer-5020282079473796926.html"&gt;DFAs of the parser&lt;/a&gt; in the past,
though the code is unfortunately lost.&lt;/p&gt;
&lt;p&gt;All these visualizations are made by walking the relevant data structures and
producing a Graphviz input file using a bit of string manipulation, which is
quite easy to do. Knowing a bit of Graphviz is a really useful skill, it's
super easy to make throwaway visualizations.&lt;/p&gt;
&lt;p&gt;For example here is a one-off thing I did when debugging our &lt;a class="reference external" href="https://morepypy.blogspot.com/2019/10/pypys-new-json-parser.html"&gt;JSON parser&lt;/a&gt; to
show the properties of the objects used in a huge example json file:&lt;/p&gt;
&lt;img alt="/images/2021-graphviz-08-json-parser.png" src="https://www.pypy.org/images/2021-graphviz-08-json-parser.png"&gt;
&lt;p&gt;On top of graphviz, we have a custom tool called the &lt;a class="reference external" href="https://foss.heptapod.net/pypy/pypy/-/tree/branch/default/dotviewer"&gt;dotviewer&lt;/a&gt;, which is
written in Python and uses &lt;a class="reference external" href="https://pygame.org"&gt;Pygame&lt;/a&gt; to give you a zoomable, pannable, searchable
way to look at huge Graphviz graphs. All the images in this post are
screenshots of that tool. In its simplest form it takes any .dot files as
input.&lt;/p&gt;
&lt;p&gt;Here's a small video dotviewer, moving around and searching in the json graph.
By writing a bit of extra Python code the dotviewer can also be extended to add
hyperlinks in the graphs to navigate to different views (for example, we did
that for the callgraphs above).&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/SsTmJ5_Yzh8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;All in all this is a really powerful approach to understand the behaviour of
some of code, or when debugging complicated problems and we have gotten a
huge amount of milage out of this over the years. It can be seen as an instance
of &lt;a class="reference external" href="https://moldabledevelopment.com/"&gt;moldable development&lt;/a&gt; ("a way of programming through which you construct
custom tools for each problem"). And it's really easy to get into! The Graphviz
language is quite a simple text-based language that can be applied to a huge
amount of different visualization situations.&lt;/p&gt;
&lt;/section&gt;</description><guid>https://www.pypy.org/posts/2021/04/ways-pypy-graphviz.html</guid><pubDate>Mon, 26 Apr 2021 16:00:00 GMT</pubDate></item></channel></rss>